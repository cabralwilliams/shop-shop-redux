{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","utils/GlobalState.js","utils/reducers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","cart","dispatch","useDispatch","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","products","useQuery","loading","data","useEffect","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categoryData","categories","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","cartOpen","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","replace","saveOrder","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","createStore","action","newState","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5eeaed8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch(method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n//Import useSelector and useDispatch from react-redux to create the state and dispatch variables\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction ProductItem(item) {\n  ///Create the state and dispatch functions - extract the state properties needed for ProductItem\n  const state = useSelector(state => {\n    return { cart: state.cart };\n  });\n  const dispatch = useDispatch();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    //find the cart item with the matching id\n    const itemInCart = cart.find(cartItem => cartItem._id === _id);\n\n    //if there was a match, call UPDAA=TE with a new purchase quantity\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect} from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n//Import useSelector and useDispatch from react-redux to create the state and dispatch variables\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction ProductList() {\n  //Create the state and dispatch functions - extract the state properties needed for ProductList\n  const state = useSelector(state => {\n    return { currentCategory: state.currentCategory, products: state.products };\n  });\n  const dispatch = useDispatch();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      //Store each product in IndexedDB\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if(!loading) {\n      //If the data is neither loading nor present - implying offline state\n      idbPromise('products', 'get').then(products => {\n        //Use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n  //const products = data?.products || [];\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n//Import useDispatch from react-redux to create the dispatch variable\nimport { useDispatch } from \"react-redux\";\n\nfunction CategoryMenu() {\n  //Create the dispatch variable\n  const dispatch = useDispatch();\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  const categories = categoryData?.categories || [];\n\n  useEffect(() => {\n    //If categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if(categoryData) {\n      //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if(!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from '../../utils/helpers';\n//Import useSelector and useDispatch from react-redux to create the state and dispatch variables\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst CartItem = ({ item }) => {\n    //Create the state and dispatch functions - extract the state just for loggin purposes\n    const state = useSelector(state => {\n        return { cart: state.cart };\n    });\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n        console.log(state);\n    };\n\n    const onChange = e => {\n        const value = e.target.value;\n\n        if(value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n\n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return(\n        <div className=\"flex-row\">\n            <div>\n                <img src={`/images/${item.image}`} alt=\"\" />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div><span>Qty:</span> <input type=\"number\" placeholder=\"1\" value={item.purchaseQuantity} onChange={onChange}/><span role=\"img\" aria-label=\"trash\" onClick={() => removeFromCart(item)}>🗑️</span></div>\n            </div>\n        </div>\n    )\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from \"@apollo/client\";\n//Import useSelector and useDispatch from react-redux to create the state and dispatch variables\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    //Create the state and dispatch functions - extract the state properties needed for Cart\n    const state = useSelector(state => {\n        return { cart: state.cart, cartOpen: state.cartOpen };\n    });\n    const dispatch = useDispatch();\n    console.log(state);\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart]});\n        };\n\n        if(!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n        if(data) {\n            stripePromise.then(res => {\n                res.redirectToCheckout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n        console.log(state);\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price*item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        state.cart.forEach(item => {\n            for(let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        });\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n    }\n\n    if(!state.cartOpen) {\n        return(\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span role=\"img\" aria-label=\"trash\">🛒</span>\n            </div>\n        );\n    }\n    return(\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                    {state.cart.map(item => (\n                        <CartItem key={item._id} item={item} />\n                    ))}\n                    <div className=\"flex-row space-between\">\n                        <strong>Total: ${calculateTotal()}</strong>\n                        {\n                            Auth.loggedIn() ?\n                            <button onClick={submitCheckout}>\n                                Checkout\n                            </button>\n                            :\n                            <span>(log in to check out)</span>\n                        }\n                    </div>\n                </div>\n            ) : (\n                <h3>\n                    <span role=\"img\" aria-label=\"shocked\">\n                        😱\n                    </span>\n                    You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport { UPDATE_PRODUCTS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART } from \"../utils/actions\";\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n//Import useSelector and useDispatch from react-redux to create the state and dispatch variables\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Detail() {\n  //Create the state and dispatch functions - extract the state properties needed for Detail\n  const state = useSelector(state => {\n    return { products: state.products, cart: state.cart };\n  });\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  const addToCart = () => {\n    //find the cart item with the matching id\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    //if there was a match, call UPDAA=TE with a new purchase quantity\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      //place item in indexedDB cart as well\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      //if product not yet in cart\n      idbPromise('cart','put', { ...currentProduct, purchaseQuantity: 1});\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    //remove from indexedDB cart as well\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    } else if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if(!loading) {\n      //get cached data from idb\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, id, data, dispatch, loading]);\n\n  console.log(state);\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button disabled={!cart.find(p => p._id === currentProduct._id)} onClick={removeFromCart}>Remove from Cart</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart','get');\n            const products = cart.map(product => product._id);\n\n            if(products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach(item => {\n                    idbPromise('cart', 'delete', item);\n                });\n\n                setTimeout(() => {\n                    window.location.replace('/');\n                }, 3000);\n            }\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return(\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>Thank you for your purchase!</h2>\n                <h2>You will now be redirected to the homepage.</h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","//Import the reducer function created in reducers.js and createStore from redux\nimport { reducer } from \"./reducers\";\nimport { createStore } from 'redux';\n\n//Create the redux store with the initial state and reducer created in reducers.js!\nconst store = createStore(reducer,{ products: [], cart: [], cartOpen: false, categories: [], currentCategory: ''});\n\n//Export the store just created for passage to the Provider element of App.js\nexport { store };","import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\n\nexport const reducer = (state, action) => {\n    switch(action.type) {\n        //if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products]\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => product._id !== action._id);\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if(action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        //if the type is none of these actions, just return state without updating\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Success from './pages/Success';\nimport Nav from './components/Nav';\n\nimport OrderHistory from './pages/OrderHistory';\n\n//Import the store from the GlobalState file and the Provider element from react-redux\nimport { store } from './utils/GlobalState';\nimport { Provider } from 'react-redux';\n\nconsole.log(store);\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  //Duplicate the below but with redux coding to see if it works without getting rid of the working code\n  return(\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}